/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.data.Data;
import controller.operations.ObjectFinder;
import controller.operations.userOperations.CollectionOperations;
import java.awt.Color;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import model.Collection;
import model.User;
import model.outfitFields.Outfit;

/**
 *
 * @author Ege
 */
public class MyCollectionFrame extends javax.swing.JFrame {
    User user;

    /**
     * Creates new form MyCollectionFrame
     */
    public MyCollectionFrame(User user) {
        this.user=user;
        initComponents();
        outfitMessage.setForeground(Color.magenta);
        removeMessage.setForeground(Color.magenta);
        createCollectionMessage.setForeground(Color.magenta);

        showCollectionName.setText("");
        outfitMessage.setText("");
        removeMessage.setText("");
        createCollectionMessage.setText("");
        fillOutfitBox();
        fillCollectionBox();





    }
    private void fillOutfitBox(){
        for(Outfit o:Data.outfits){
            String outfit=o.getBrandName()+" "+o.getColor()+" "+o.getClothingType()+" "+o.getSize()+" "+o.getGender();
            allOutfits.addItem(outfit);
        }
    }
    private void fillCollectionBox(){
        if(user.getCollectionContent().size()!=0){
            for(String id:user.getCollectionContent()){
                String colName = ObjectFinder.getCollectionFromCollectionId(id).getCollectionName();
                allCollections.addItem(id+","+colName);
            }
        }
    }
    private  void fillCollectionOutfitsTable(Collection collection){
        DefaultTableModel model=(DefaultTableModel) outfitsOfCollectionTable.getModel();
        if(allOutfits.getSelectedIndex()!=-1){
            for(String outfit:collection.getCollectionOutfits()){
                Outfit o = ObjectFinder.getOutfitFromProductId(outfit);
                Object[] outfitItem={o.getProductId(),o.getBrandName(),o.getColor(),
                        o.getClothingType(),o.getSize(),o.getGender(),o.getLikedUsers().size(),o.getDislikedUsers().size()};
                model.addRow(outfitItem);
            }

        }

    }
    private void removeRows(){
        DefaultTableModel model=(DefaultTableModel) outfitsOfCollectionTable.getModel();
        int row=0;
        while(model.getRowCount()>0){
            model.removeRow(row);

        }


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        allCollections = new javax.swing.JComboBox<>();
        showCollectionName = new javax.swing.JLabel();
        removeOutfitButton = new javax.swing.JButton();
        allOutfits = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        outfitsOfCollectionTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        addOutfitButton = new javax.swing.JButton();
        createCollectionButton = new javax.swing.JButton();
        outfitMessage = new javax.swing.JLabel();
        backToUserFrame = new javax.swing.JButton();
        removeMessage = new javax.swing.JLabel();
        collectionName = new javax.swing.JTextField();
        createCollectionMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        allCollections.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allCollectionsMouseClicked(evt);
            }
        });
        allCollections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCollectionsActionPerformed(evt);
            }
        });

        showCollectionName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        showCollectionName.setForeground(new java.awt.Color(51, 51, 255));
        showCollectionName.setText("Collection Name");

        removeOutfitButton.setText("Remove Outfit");
        removeOutfitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeOutfitButtonActionPerformed(evt);
            }
        });

        allOutfits.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allOutfitsMouseClicked(evt);
            }
        });

        outfitsOfCollectionTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Product ID", "Brand Name", "Color", "Clothing Type", "Size", "Gender", "Number of Likes", "Number of Dislikes"
                }
        ));
        outfitsOfCollectionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(outfitsOfCollectionTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("All Outfits To Add");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("My Collections");

        addOutfitButton.setText("Add Outfit");
        addOutfitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOutfitButtonActionPerformed(evt);
            }
        });

        createCollectionButton.setText("Create Collection");
        createCollectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCollectionButtonActionPerformed(evt);
            }
        });

        outfitMessage.setText("message");

        backToUserFrame.setIcon(new javax.swing.ImageIcon("backButton.jpeg")); // NOI18N
        backToUserFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToUserFrameActionPerformed(evt);
            }
        });

        removeMessage.setText("message");

        collectionName.setText("CollectionName"); // NOI18N
        collectionName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                collectionNameMouseClicked(evt);
            }
        });
        collectionName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectionNameActionPerformed(evt);
            }
        });

        createCollectionMessage.setText("message");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backToUserFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(createCollectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(collectionName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(outfitMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(71, 71, 71)
                                                                                .addComponent(addOutfitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(59, 59, 59))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(allOutfits, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(51, 51, 51))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(allCollections, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(46, 46, 46)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(removeOutfitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 863, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(removeMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(showCollectionName, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addContainerGap(22, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(createCollectionMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(backToUserFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(showCollectionName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(removeOutfitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(allCollections, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(removeMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(44, 44, 44)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(allOutfits, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(addOutfitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(outfitMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(collectionName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(createCollectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(14, 14, 14)))
                                .addComponent(createCollectionMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(161, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void allCollectionsActionPerformed(java.awt.event.ActionEvent evt) {
        removeRows();
        if(allCollections.getSelectedIndex()!=-1){
            outfitsOfCollectionTable.removeAll();
            String selectedCollectionId=getId((String) allCollections.getSelectedItem());
            Collection targetCollection=ObjectFinder.getCollectionFromCollectionId(selectedCollectionId);
            showCollectionName.setText("COLLECTION NAME: "+targetCollection.getCollectionName());

            fillCollectionOutfitsTable(targetCollection);
        }
    }

    public static String getId(String selectedItem){
        String[] split=selectedItem.split(",");
        return split[0];
    }

    private void removeOutfitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel model=(DefaultTableModel) outfitsOfCollectionTable.getModel();
        int selectedRow=outfitsOfCollectionTable.getSelectedRow();


        if(allCollections.getSelectedIndex()==-1){
            removeMessage.setForeground(Color.red);
            removeMessage.setText("You have not any collection to add or remove outfit");
        }else{

            if(selectedRow==-1){
                removeMessage.setForeground(Color.red);
                if(model.getRowCount()==0){

                    removeMessage.setText("Your outfit of collection table is empty");
                }
                else{
                    removeMessage.setText("No outfit selected to remove outfit");
                }
            }else{
                Outfit removedOutfit=ObjectFinder.getOutfitFromProductId((String) outfitsOfCollectionTable.getValueAt(selectedRow,0));
                Collection targetCollection=ObjectFinder.getCollectionFromCollectionId(getId((String) allCollections.getSelectedItem()));
                CollectionOperations collectionOperations=new CollectionOperations();
                if(collectionOperations.removeOutfitFromCollection(targetCollection, removedOutfit)){
                    model.removeRow(selectedRow);
                    removeMessage.setText("A "+removedOutfit.getClothingType()+" is removed from "+targetCollection.getCollectionName());
                }
            }




        }

    }

    private void formMouseClicked(java.awt.event.MouseEvent evt) {
        outfitsOfCollectionTable.clearSelection();
        outfitMessage.setText("");
        removeMessage.setText("");
        createCollectionMessage.setText("");
        outfitMessage.setForeground(Color.magenta);
        removeMessage.setForeground(Color.magenta);
        createCollectionMessage.setForeground(Color.magenta);
    }

    private void allOutfitsMouseClicked(java.awt.event.MouseEvent evt) {
        outfitsOfCollectionTable.clearSelection();
        outfitMessage.setText("");
        removeMessage.setText("");
        createCollectionMessage.setText("");
        outfitMessage.setForeground(Color.magenta);
        removeMessage.setForeground(Color.magenta);
        createCollectionMessage.setForeground(Color.magenta);
    }

    private void allCollectionsMouseClicked(java.awt.event.MouseEvent evt) {
        outfitsOfCollectionTable.removeAll();
        outfitsOfCollectionTable.clearSelection();
        outfitMessage.setText("");
        removeMessage.setText("");
        createCollectionMessage.setText("");
        outfitMessage.setForeground(Color.magenta);
        removeMessage.setForeground(Color.magenta);
        createCollectionMessage.setForeground(Color.magenta);
    }

    private void addOutfitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel model=(DefaultTableModel) outfitsOfCollectionTable.getModel();

        if(allCollections.getSelectedIndex()==-1){
            outfitMessage.setForeground(Color.red);
            outfitMessage.setText("You have not any collection to add or remove outfit");
        }else{
            Outfit addedOutfit=ObjectFinder.getOutfitFromProductId(String.valueOf(allOutfits.getSelectedIndex()+1));
            Collection targetCollection=ObjectFinder.getCollectionFromCollectionId(getId((String) allCollections.getSelectedItem()));

            CollectionOperations collectionOperations=new CollectionOperations();
            if(collectionOperations.addOutfitToCollection(targetCollection, addedOutfit)){
                Object[] addedOutfits={addedOutfit.getProductId(),addedOutfit.getBrandName()
                        ,addedOutfit.getColor(),addedOutfit.getClothingType(),addedOutfit.getSize(),addedOutfit.getGender(),addedOutfit.getLikedUsers().size(),addedOutfit.getDislikedUsers().size()};
                model.addRow(addedOutfits);

                outfitMessage.setText("Selected outfit is added to"+targetCollection.getCollectionName());
            }
            else{
                outfitMessage.setForeground(Color.red);
                outfitMessage.setText("You can not add outfit more than once");
            }
        }







    }

    private void backToUserFrameActionPerformed(java.awt.event.ActionEvent evt) {
        this.setVisible(false);
        UserFrame userFrame=new UserFrame(user);
        userFrame.setVisible(true);
    }

    private void createCollectionButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String createCollectionName=collectionName.getText();
        CollectionOperations collectionOperations=new CollectionOperations();
        if(createCollectionName.equals("")){
            createCollectionMessage.setForeground(Color.red);
            createCollectionMessage.setText("Collection name field can not be empty");
        }else{
            if(collectionOperations.createCollection(user, createCollectionName)){
                createCollectionMessage.setText(createCollectionName+" is created");
                allCollections.removeAllItems();
                fillCollectionBox();
            }else{
                createCollectionMessage.setForeground(Color.red);
                createCollectionMessage.setText(createCollectionName+" is already exist in your collection");

            }
        }

    }

    private void collectionNameMouseClicked(java.awt.event.MouseEvent evt) {
        collectionName.setText("");
        createCollectionMessage.setText("");
        createCollectionMessage.setForeground(Color.magenta);

    }

    private void collectionNameActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify
    private javax.swing.JButton addOutfitButton;
    private javax.swing.JComboBox<String> allCollections;
    private javax.swing.JComboBox<String> allOutfits;
    private javax.swing.JButton backToUserFrame;
    private javax.swing.JTextField collectionName;
    private javax.swing.JButton createCollectionButton;
    private javax.swing.JLabel createCollectionMessage;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel outfitMessage;
    private javax.swing.JTable outfitsOfCollectionTable;
    private javax.swing.JLabel removeMessage;
    private javax.swing.JButton removeOutfitButton;
    private javax.swing.JLabel showCollectionName;
    // End of variables declaration
}